import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
from datetime import datetime
from core.db.stats import Db
import re

admins = []

class Bot:

    def __init__(self, api_token):
        vk_session = vk_api.VkApi(token=api_token)
        self.longpoll = VkLongPoll(vk_session)
        self.vk = vk_session.get_api()
        self.event = None
        print("Started kTVCSS-Ranking-System-Bot")

    def _send_message(self, message):
        self.vk.messages.send(message=message, user_id=self.event.user_id, random_id=self.random_id())

    def _send_mentioned_message(self, message):
        self.vk.messages.send(message=self._get_user_firstname() + ', ' + message, user_id=self.event.user_id, random_id=self.random_id())

    def _send_steam_not_found(self):
        header = f'–Ω–µ –Ω–∞–π–¥–µ–Ω Steam ID —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π.\n'
        body = f'–ü—Ä–∏–≤—è–∂–∏—Ç–µ –≤–∞—à—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–º–∞–Ω–¥–æ–π !setid –í–ê–®_STEAM_ID'
        self._send_mentioned_message(header + body)

    def _get_user_firstname(self) -> str:
        return self.vk.users.get(user_ids=self.event.user_id)[0]['first_name']

    def random_id(self):
        """
        Generates RandomID
        """
        dt = datetime.now()
        epoch = datetime.utcfromtimestamp(0)
        return (dt - epoch).total_seconds() * 1000.0

    def resetid(self):
        """
        [ADMIN] Remove VkID from SteamID
        """
        if len(self.event.text.split(' ')) <= 1:
            self._send_message('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.\n–ü—Ä–∏–º–µ—Ä: !resetid STEAM_0:0:0123456789')
            return None
        try:
            steamid = re.search(r"(!\w+) (STEAM_\d:\d:\d+)", self.event.text).group(2).strip()
        except Exception:
            self._send_message('–í–≤–µ–¥–µ–Ω–Ω—ã–π STEAM_ID –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π.\n–ü—Ä–∏–º–µ—Ä: !resetid STEAM_0:0:0123456789')
            return None
        db = Db()
        if db.remove_id_by_steam(steamid) == 0:
            print('Admin %s used !resetid for %s' % (str(self.event.user_id), steamid))

    def help(self):
        """
        Displays help message
        """
        self._send_mentioned_message("–¥–ª—è –≤–∞—Å –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã: !help, !setid, !delid, !mystats, !togglestats")
        if str(self.event.user_id) in admins:
            self._send_message("–¢–∞–∫ –∫–∞–∫ –≤—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å ‚ôÇfisting‚ôÇ —á–µ—Ä–µ–∑: !resetid, !getinfo")

    def togglestats(self):
        """
        Toggles player's statistics sending
        """
        db = Db()
        result = db.toggle_stats(self.event.user_id)
        if result == -1:
            self._send_steam_not_found()
        else:
            self._send_mentioned_message(f'–¥–ª—è –≤–∞—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—ã–ª–∏ {"–≤—ã–∫–ª—é—á–µ–Ω—ã üö´" if result == 0 else "–≤–∫–ª—é—á–µ–Ω—ã ‚úÖ"}')

    def delid(self):
        """
        Unlinks player's VkID from SteamID
        """
        db = Db()
        result = db.remove_id(self.event.user_id)
        if result == 0:
            self._send_mentioned_message(f"–≤—ã –æ—Ç–≤—è–∑–∞–ª–∏ —Å–≤–æ—é —Å—Ç—Ä–∞–Ω–∏—Ü—É ‚ö†")
        else:
            self._send_steam_not_found()

    def setid(self):
        """
        Link player's SteamID to VkID
        """
        if len(self.event.text.split(' ')) <= 1:
            self._send_message('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.\n–ü—Ä–∏–º–µ—Ä: !setid STEAM_0:0:0123456789')
            return None
        try:
            steamid = re.search(r"(!\w+) (STEAM_\d:\d:\d+)", self.event.text).group(2).strip()
        except Exception:
            self._send_message('–í–≤–µ–¥–µ–Ω–Ω—ã–π STEAM_ID –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π.\n–ü—Ä–∏–º–µ—Ä: !setid STEAM_0:0:0123456789')
            return None
        db = Db()
        result = db.set_id(self.event.user_id, steamid)
        if result == 0:
            self._send_message(f"–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –í–ö {self.event.user_id} –±—ã–ª –ø—Ä–∏–≤—è–∑–∞–Ω –∫ {steamid}")
        elif result == 1:
            self._send_message("–≠—Ç–æ—Ç Steam ID –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π.\n–°—ã–≥—Ä–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∏–≥—Ä—É.")
        elif result == -1:
            self._send_message("–≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç VK —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω!\n–î–ª—è –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å !delid")

    def mystats(self):
        """
        Prints player's statistics
        """
        db = Db()
        word = '–º–∞—Ç—á'
        stats = db.get_stats(self.event.user_id)
        if stats is not None:
            header = f"\"{stats['NAME']}\" –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üì¢\n–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á {str(stats['LASTMATCH']).split('.')[0]}.\n"
            kill_stats = f"–£–±–∏–π—Å—Ç–≤: {int(stats['KILLS'])}. –°–º–µ—Ä—Ç–µ–π: {int(stats['DEATHS'])}. –•—ç–¥—à–æ—Ç–æ–≤: {int(stats['HEADSHOTS'])}. KDR: {stats['KDR']:.2f}.\n"
            kill_sub_stats = f"HSR: {stats['HSR']:.2f}. AVG: {stats['AVG']:.2f}. K/D: {stats['KDR']:.2f}.\n"
            play_stats = f"–ü–æ–±–µ–¥: {int(stats['MATCHESWINS'])}. –ü–æ—Ä–∞–∂–µ–Ω–∏–π {int(stats['MATCHESLOOSES'])}. –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {int(stats['WINRATE'])}%\n"
            if int(stats['MATCHESPLAYED']) >= 10:
                rank_footer = f"–¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {stats['MMR']}. –ü–æ–∑–∏—Ü–∏—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: UNDEFINED\n–í–∞—à —Ç–µ–∫—É—â–∏–π —Ä–∞–Ω–∫: {stats['RANKNAME']}\n"
            else:
                if int(10 - int(stats['MATCHESPLAYED'])) == 1:
                    word = '–º–∞—Ç—á'
                elif int(10 - int(stats['MATCHESPLAYED'])) in [2, 3, 4]:
                    word = '–º–∞—Ç—á–∞'
                elif int(10 - int(stats['MATCHESPLAYED'])) in [5, 6, 7, 8, 9]:
                    word = '–º–∞—Ç—á–µ–π'
                rank_footer = f"–í—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫—É. –î–æ –∫–æ–Ω—Ü–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ {10 - stats['MATCHESPLAYED']} {word}.\n"
            final_message = header + kill_stats + kill_sub_stats + play_stats + rank_footer
            self._send_mentioned_message(final_message)
        else:
            self._send_steam_not_found()

    def start(self):
        for self.event in self.longpoll.listen():
            if self.event.type == VkEventType.MESSAGE_NEW and self.event.to_me and self.event.text:
                if self.event.from_user:
                    if self.event.text == '!help':
                        self.help()
                    elif self.event.text == '!togglestats':
                        self.togglestats()
                    elif self.event.text == '!mystats':
                        self.mystats()
                    elif self.event.text.startswith('!delid'):
                        self.delid()
                    elif self.event.text.startswith('!setid'):
                        self.setid()
                    elif self.event.text.startswith('!resetid') and str(self.event.user_id) in admins:
                        self.resetid()
                    '''
                    elif self.event.text.startswith('!dbg_getinfo') and str(self.event.user_id) in admins:
                        self.getinfo()
                    '''


def main():
    with open('./token', 'r') as token_file:
        token = token_file.readline()
    with open('./admins', 'r') as admins_file:
        for line in admins_file:
            temp = line.split(' ')[0].rstrip()
            if temp != '': admins.append(temp)
    print('Admins loaded:', admins)
    while True:
        try:
            bot = Bot(token)
            bot.start()
            print('[DEBUG] Connected to VK_API!')
        except Exception as e:
            print('[ERROR] EXCEPTION CAUGHT! RESTARTING! ')
            print(e)


if __name__ == '__main__':
    main()
